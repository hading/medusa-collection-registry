- if Delayed::Job.where('failed_at IS NOT NULL').count > 0
  .alert.alert-danger
    %p
      %span.badge #{Delayed::Job.where('failed_at IS NOT NULL').count}
      delayed jobs have failed! Please contact the development staff to diagnose

= render layout: 'layouts/standard_table', locals: {id: :running_virus_scans, classes: %w(table-bordered table-condensed), caption: 'Virus Scans', headers: ['File Group', 'Created']} do
  - Job::VirusScan.includes(:file_group).each do |virus_scan_job|
    %tr
      %td= link_to virus_scan_job.file_group.title, polymorphic_path(virus_scan_job.file_group)
      %td= link_to virus_scan_job.created_at.to_date.to_s

= render layout: 'layouts/standard_table', locals: {id: :running_fits_scans, classes: %w(table-bordered table-condensed), caption: 'FITS Scans', headers: ['Path', 'File Group', 'Files remaining']} do
  - BitLevelFileGroup.where(id: Job::FitsDirectory.distinct.pluck(:file_group_id)).includes(:cfs_directory).each do |file_group|
    - if file_group.cfs_directory.present?
      %tr
        %td= file_group.cfs_directory.relative_path
        %td= link_to(file_group.title, polymorphic_path(file_group))
        %td= file_group.running_fits_file_count

= render layout: 'layouts/standard_table', locals: {id: :running_initial_assessment_scans, classes: %w(table-bordered table-condensed), caption: 'Initial Assessment Scans', headers: ['Path', 'File Group', 'Files remaining']} do
  - BitLevelFileGroup.where(id: Job::CfsInitialDirectoryAssessment.distinct.pluck(:file_group_id)).includes(:cfs_directory).each do |file_group|
    - if file_group.cfs_directory.present?
      %tr
        %td= file_group.cfs_directory.relative_path
        %td= link_to(file_group.title, polymorphic_path(file_group))
        %td= file_group.running_initial_assessments_file_count

= render layout: 'layouts/standard_table', locals: {id: :running_ingests, classes: %w(table-bordered table-condensed), caption: 'Ingests', headers: ['File Group', 'Status']} do
  - %w(copying amazon_backup).each do |state|
    - Workflow::Ingest.where(state: state).includes(:bit_level_file_group).each do |ingest|
      - if ingest.most_advanced_file_group.present?
        %tr
          %td= link_to ingest.most_advanced_file_group.title, ingest.most_advanced_file_group
          %td= ingest_state_text(state)