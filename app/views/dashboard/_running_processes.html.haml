- if Delayed::Job.where('failed_at IS NOT NULL').count > 0
  .alert.alert-danger
    %p
      %span.badge #{Delayed::Job.where('failed_at IS NOT NULL').count}
      delayed jobs have failed! Please contact the development staff to diagnose

%h3 Running Processes

%table.table.table-striped.table-bordered.table-condensed#running_virus_scans
  %caption Virus Scans
  %thead
    %tr
      %th File Group
      %th Created
  %tbody
    - Job::VirusScan.includes(:file_group).each do |virus_scan_job|
      %tr
        %td= link_to virus_scan_job.file_group.name, polymorphic_path(virus_scan_job.file_group)
        %td= link_to virus_scan_job.created_at.to_date.to_s


%table.table.table-striped.table-bordered.table-condensed#running_fits_scans
  %caption FITS Scans
  %thead
    %tr
      %th Path
      %th File Group
      %th Files remaining
  %tbody
    - BitLevelFileGroup.where(:id => Job::FitsDirectory.distinct.pluck(:file_group_id)).includes(:cfs_directory).each do |file_group|
      - if file_group.cfs_directory.present?
        %tr
          %td= file_group.cfs_directory.relative_path
          %td= link_to(file_group.name, polymorphic_path(file_group))
          %td= file_group.running_fits_file_count


%table.table.table-striped.table-bordered.table-condensed#running_initial_assessment_scans
  %caption Initial Assessment Scans
  %thead
    %tr
      %th Path
      %th File Group
      %th Files remaining
  %tbody
    - BitLevelFileGroup.where(:id => Job::CfsInitialDirectoryAssessment.distinct.pluck(:file_group_id)).includes(:cfs_directory).each do |file_group|
      - if file_group.cfs_directory.present?
        %tr
          %td= file_group.cfs_directory.relative_path
          %td= link_to(file_group.name, polymorphic_path(file_group))
          %td= file_group.running_initial_assessments_file_count

%table.table.table-striped.table-bordered.table-condensed#running_ingests
  %caption Ingests
  %thead
    %tr
      %th File Group
      %th Status
  %tbody
    - ['copying', 'amazon_backup'].each do |state|
      - x = Workflow::Ingest.count
      - Workflow::Ingest.where(state: state).each do |ingest|
        %tr
          %td= link_to ingest.most_advanced_file_group.name, ingest.most_advanced_file_group
          %td= ingest_state_text(state)